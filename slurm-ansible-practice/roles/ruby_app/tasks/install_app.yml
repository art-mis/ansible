---
- name: "Check if we are having app directories"
  stat:
    path: "{{ ruby_app_full_path }}"
  register: app_directory

- name: Clone a private repository into /opt/ folder.
  ansible.builtin.git:
    repo: "{{ app_git_repo }}"
    dest: "/opt/{{ ruby_app_dir }}"
    accept_hostkey: yes
  when: not app_directory.stat.exists

- name: Install app dependencies through builder
  ansible.builtin.shell: "source /etc/profile.d/{{ ruby_package }}.sh && bundle config build.nokogiri --use-system-libraries && bundle install --clean --no-cache --without development"
  args:
    executable: /bin/bash
    chdir: "{{ ruby_app_full_path }}"
  register: result
  failed_when: "result.rc != 0 and 'Bundle complete!' not in result.stdout"
  notify: Restart Ruby App Service

- name: Make assets precompile
  ansible.builtin.shell: "source /etc/profile.d/{{ ruby_package }}.sh && SECRET_KEY_BASE={{ ruby_app_environment | selectattr('name', 'equalto', 'SECRET_KEY_BASE') | map(attribute='value') | join(',') }} RAILS_ENV={{ ruby_app_environment | selectattr('name', 'equalto', 'RAILS_ENV') | map(attribute='value') | join(',') }} bundle exec rake assets:precompile"
  args:
    executable: /bin/bash
    chdir: "{{ ruby_app_full_path }}"
  notify: Restart Ruby App Service

- name: Create systemd unit file for ruby app.
  ansible.builtin.template:
    src: ruby_app.service.j2
    dest: "/etc/systemd/system/{{ ruby_app_service }}.service"
    mode: 0644
  notify: Restart Ruby App Service

- name: Reload systemd to reread configs
  ansible.builtin.systemd:
    daemon_reload: true

- name: Make sure a service unit for ruby app is running
  ansible.builtin.systemd:
    state: started
    name: "{{ ruby_app_service }}"
